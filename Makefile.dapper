# This Makefile contains the rules required to set up our
# Dapper-based build environment; it can be copied as-is to
# other projects (and needs to be copied, it can't be shared
# via the Dapper image since it's needed to retrieve the image)

PROJECT ?= $(notdir $(CURDIR))
BASE_DAPPER := Dockerfile.dapper
LINTING_DAPPER := Dockerfile.linting
LINTING_GOALS := gitlint shellcheck yamllint markdownlint
NON_DAPPER_GOALS += .dapper shell targets $(LINTING_GOALS)
export MAKEFLAGS
export PROJECT

.dapper:
	@echo Downloading dapper
	@curl -sL https://releases.rancher.com/dapper/latest/dapper-`uname -s`-`uname -m` > .dapper.tmp
	@@chmod +x .dapper.tmp
	@./.dapper.tmp -v
	@mv .dapper.tmp .dapper

SELINUX_CONTEXT := $(shell (selinuxenabled && echo -S z) 2>/dev/null)
RUN_IN_DAPPER := ./.dapper -m bind $(SELINUX_CONTEXT)

# Only run command line goals in dapper (except things that have to run outside of dapper).
# Otherwise, make applies this rule to various files and tries to build them in dapper (which doesn't work, obviously).
$(filter-out .dapper prune-images shell targets $(NON_DAPPER_GOALS),$(MAKECMDGOALS)): .dapper $(BASE_DAPPER)
	-docker network create -d bridge kind
	+$(RUN_IN_DAPPER) make --debug=b $@

# The original dockerfiles will live in Shipyard and be downloaded by consuming projects.
$(BASE_DAPPER) $(LINTING_DAPPER):
	@echo Downloading $@
	@curl -sfLO https://raw.githubusercontent.com/submariner-io/shipyard/$(BASE_BRANCH)/$@

# Run silently as the commands are pretty straightforward and `make` hasn't a lot to do
$(LINTING_GOALS): .dapper $(LINTING_DAPPER)
	@$(RUN_IN_DAPPER) -f $(LINTING_DAPPER) -q make $@

# [prune-images] removes all Submariner-provided images and all untagged images
# Use this to ensure you use current images
# Copied from Makefile to provide this everywhere (until we can share
# non-Dapper goals across projects)
prune-images:
	docker images | grep -E '(admiral|lighthouse|nettest|shipyard|submariner|<none>)' | while read image tag hash _; do \
	    if [ "$$tag" != "<none>" ]; then \
	        docker rmi $$image:$$tag; \
	    else \
	        docker rmi $$hash; \
	    fi \
	done

shell: .dapper $(BASE_DAPPER)
	$(RUN_IN_DAPPER) -s

# Run silently to just list the targets (hence we can't use the generic dapper wrapper recipe).
# This only lists targets accessible inside dapper (which are 99% of targets we use)
targets: $(LINTING_DAPPER)
	@$(RUN_IN_DAPPER) -f $(LINTING_DAPPER) -q eval "\$${SCRIPTS_DIR}/targets.sh"

.PHONY: prune-images shell targets $(LINTING_GOALS)
