### VARIABLES ###

SHELLCHECK_ARGS += $(shell [ ! -d scripts ] || find scripts -type f -exec awk 'FNR == 1 && /sh$$/ { print FILENAME }' {} +)
export SHELLCHECK_ARGS

### TARGETS ###

.PHONY: gitlint golangci-lint markdownlint packagedoc-lint shellcheck yamllint

# [gitlint] validates the commits are valid
gitlint:
	if [ -r .gitlint ]; then \
	    gitlint --commits origin/$(BASE_BRANCH)..HEAD; \
	else \
	    gitlint --config $(SHIPYARD_DIR)/.gitlint --commits origin/$(BASE_BRANCH)..HEAD; \
	fi

# [golangci-lint] validates Go code in the project
golangci-lint:
ifneq (,$(shell find . -name '*.go'))
	golangci-lint version
	golangci-lint linters
	golangci-lint run --timeout 10m
else
	@echo 'There are no Go files to lint.'
endif

# [markdownlint] validates Markdown files in the project
markdownlint:
	md_ignored=(); \
	if [ -r .mdignore ]; then \
		md_ignored+=($$(< .mdignore)); \
	fi; \
	markdownlint -c .markdownlint.yml $${md_ignored[@]/#/-i } .

# [packagedoc-lint] checks that the package docs donâ€™t include the SPDX header
packagedoc-lint:
	result=0; \
	for package in $$(find . -name vendor -prune -o -name \*.go -printf "%h\n" | sort -u); do \
		if $(GO) doc $$package | grep -q SPDX; then \
			echo $$package has an invalid package documentation; \
			result=1; \
		fi; \
	done 2>/dev/null; \
	exit $$result

# [shellcheck] validates your shell files
shellcheck:
# Only run shellcheck if there are files to check
ifneq (,$(SHELLCHECK_ARGS))
	shellcheck -x -P $${SCRIPTS_DIR} $(SHELLCHECK_ARGS)
	# https://github.com/koalaman/shellcheck/issues/1659
	! grep $$'\t' $(SHELLCHECK_ARGS)
else
	@echo 'There are no shell scripts to check; if this is incorrect, specify them in SHELLCHECK_ARGS.'
endif

# [yamllint] validates YAML files in the project
yamllint:
	yamllint --strict .


