. ${BASH_SOURCE%/*}/source_only

### Constants ###

readonly KIND_REGISTRY=kind-registry
readonly RESOURCES_DIR=${SCRIPTS_DIR}/resources
readonly OUTPUT_DIR=${DAPPER_OUTPUT}
readonly KUBECONFIGS_DIR=${DAPPER_OUTPUT}/kubeconfigs

### Functions ###

# Mask kubectl to use cluster context if the variable is set and context isn't specified,
# otherwise use the config context as always.
function kubectl() {
    context_flag=""
    if [[ -n "${cluster}" && ! "${@}" =~ "context" ]]; then
        context_flag="--context=${cluster}"
    fi
    command kubectl ${context_flag} "$@"
}

# Run cluster commands in parallel.
# 1st argument is the numbers of the clusters to run for, supports "1 2 3" or "{1..3}" for range
# 2nd argument is the command to execute, which will have the $cluster variable set.
function run_parallel() {
    clusters=$(eval echo "$1")
    cmnd=$2
    declare -A pids
    for i in ${clusters}; do
        cluster="cluster${i}"
        ( $cmnd | sed "s/^/[${cluster}] /" ) &
        unset cluster
        pids["${i}"]=$!
    done

    for i in ${!pids[@]}; do
        wait ${pids[$i]}
    done
}

function registry_running() {
    docker ps --filter name="^/?$KIND_REGISTRY$" | grep $KIND_REGISTRY
    return $?
}

function declare_cidrs() {
    globalnet=$1
    declare -gA cluster_CIDRs service_CIDRs global_CIDRs

    if [[ $globalnet = "true" ]]; then
        # When globalnet is set to true, we want to deploy clusters with overlapping CIDRs
        cluster_CIDRs=( ["cluster1"]="10.244.0.0/16" ["cluster2"]="10.244.0.0/16" ["cluster3"]="10.244.0.0/16" )
        service_CIDRs=( ["cluster1"]="100.94.0.0/16" ["cluster2"]="100.94.0.0/16" ["cluster3"]="100.94.0.0/16" )
        global_CIDRs=( ["cluster1"]="169.254.1.0/24" ["cluster2"]="169.254.2.0/24" ["cluster3"]="169.254.3.0/24" )
    else
        cluster_CIDRs=( ["cluster1"]="10.244.0.0/16" ["cluster2"]="10.245.0.0/16" ["cluster3"]="10.246.0.0/16" )
        service_CIDRs=( ["cluster1"]="100.94.0.0/16" ["cluster2"]="100.95.0.0/16" ["cluster3"]="100.96.0.0/16" )
    fi
}

function declare_kubeconfig() {
    export KUBECONFIG=$(echo ${KUBECONFIGS_DIR}/kind-config-cluster{1..3} | sed 's/ /:/g')
}
