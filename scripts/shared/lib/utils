. ${BASH_SOURCE%/*}/source_only

### Constants ###

readonly KIND_REGISTRY=kind-registry
readonly RESOURCES_DIR=${SCRIPTS_DIR}/resources
readonly OUTPUT_DIR=${DAPPER_OUTPUT}
readonly KUBECONFIGS_DIR=${DAPPER_OUTPUT}/kubeconfigs

### Functions ###

# Mask kubectl to use cluster context if the variable is set and context isn't specified,
# otherwise use the config context as always.
function kubectl() {
    context_flag=""
    if [[ -n "${cluster}" && ! "${@}" =~ "context" ]]; then
        context_flag="--context=${cluster}"
    fi
    command kubectl ${context_flag} "$@"
}

# Run a command with the given cluster as the context, which will be unset once finished
# 1st argument is the context which will be set to $cluster global variable.
# 2nd argument is the command to execute.
# 3rd argument and so forth get passed to the command.
function with_context() {
    local cluster=$1
    local cmnd=$2
    $cmnd "${@:3}"
}

# Run cluster commands in parallel.
# 1st argument is the numbers of the clusters to run for, supports "1 2 3" or "{1..3}" for range
# 2nd argument is the command to execute, which will have the $cluster variable set.
# 3rd argument and so forth get passed to the command.
function run_parallel() {
    clusters=$(eval echo "$1")
    cmnd=$2
    declare -A pids
    for i in ${clusters}; do
        ( with_context "cluster${i}" $cmnd "${@:3}" | sed "s/^/[cluster${i}] /" ) &
        pids["${i}"]=$!
    done

    for i in ${!pids[@]}; do
        wait ${pids[$i]}
    done
}

function registry_running() {
    docker ps --filter name="^/?$KIND_REGISTRY$" | grep $KIND_REGISTRY
    return $?
}

function add_cluster_cidrs() {
    local idx="cluster${1}"
    local val=$1
    [[ $globalnet != "true" ]] || val="0"
    cluster_CIDRs[$idx]="10.24${val}.0.0/16"
    service_CIDRs[$idx]="100.9${val}.0.0/16"
    [[ $globalnet != "true" ]] || global_CIDRs[$idx]="169.254.${1}.0/24"
}

function declare_cidrs() {
    declare -gA cluster_CIDRs service_CIDRs global_CIDRs

    for i in {1..3}; do
        add_cluster_cidrs $i
    done
}

function declare_kubeconfig() {
    export KUBECONFIG=$(echo ${KUBECONFIGS_DIR}/kind-config-cluster{1..3} | sed 's/ /:/g')
}
