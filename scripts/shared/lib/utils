# shellcheck shell=bash
# shellcheck source=scripts/shared/lib/source_only
# shellcheck disable=SC2034 # We declare some shared variables here 
. "${BASH_SOURCE%/*}"/source_only

### Constants ###

readonly KIND_REGISTRY=kind-registry
readonly RESOURCES_DIR=${SCRIPTS_DIR}/resources
readonly OUTPUT_DIR=${DAPPER_OUTPUT}
readonly KUBECONFIGS_DIR=${DAPPER_OUTPUT}/kubeconfigs
readonly OCP_TEMPLATE_DIR=${OUTPUT_DIR}/ocp-template
readonly ACM_TEMPLATE_DIR=${OUTPUT_DIR}/acm-template
readonly SUBM_NS=submariner-operator
readonly ORIG_DEBUG_PRINT=$DEBUG_PRINT

### Functions ###

# Mask kubectl to use cluster context if the variable is set and context isn't specified,
# otherwise use the config context as always.
function kubectl() {
    if [[ -n "${cluster}" && ! "${*}" =~ "context" ]]; then
        command kubectl --context="${cluster}" "$@"
    else
        command kubectl "$@"
    fi
}

# Exit after printing an error message
function exit_error() {
    >&2 printf "ERROR: %s\n" "$*"
    exit 1
}

# Fail if the ENV variable is empty (with an optional message)
function expect_env() {
    declare -n value="$1"
    local err="Expected env variable ${1@Q} can't be empty"
    [[ -z "${*:2}" ]] || err+=" (${*:2})"
    [[ -n "${value}" ]] || exit_error "$err"
}

# Render a template file
function render_template() {
    local DEBUG_PRINT=false

    # For upgrade testing, use the original image from upstream
    if [[ "${SUBM_IMAGE_TAG}" == 'subctl' ]]; then
        local SUBM_IMAGE_TAG="${BASE_BRANCH}"
        # This is used in the resource template YAML
        # shellcheck disable=SC2034
        local SUBM_IMAGE_REPO="${REPO}"
    fi

    eval "echo \"$(cat "$1")\""
}

# Run a command and retry it if it fails, up to the given amount of retries
# 1st argument is the amount of times to retry the command.
# 2nd argument is the command to execute.
# 3rd argument and so forth get passed to the command.
# The current iteration is made available in the iteration variable.
function with_retries() {
    local DEBUG_PRINT=false
    local retries=$1
    local cmnd=$2

    iteration=1; while ((iteration <= retries)); do
        >&2 echo "Attempt ${iteration}/${retries} to run '${*:2}'"
        (
            DEBUG_PRINT=${ORIG_DEBUG_PRINT}
            $cmnd "${@:3}"
        ) &
        if wait $!; then
            return 0
        fi
        ((iteration++))
    done

    exit_error "Max attempts reached, failed to run '${*:2}'!"
}

function sleep_on_fail() {
    local duration=$1

    if "${@:2}"; then
        return 0
    fi

    echo "Failed to '${*:2}', sleeping for ${duration}."
    sleep "${duration}"
    return 1
}

# Run a command with the given cluster as the context, which will be unset once finished
# 1st argument is the context which will be set to $cluster global variable.
# 2nd argument is the command to execute.
# 3rd argument and so forth get passed to the command.
function with_context() {
    local cluster=$1
    local cmnd=$2
    $cmnd "${@:3}"
}

# Run cluster commands consecutively, failing on the first one to fail.
# 1st argument is the cluster names for which to run.
# 2nd argument is the command to execute, which will have the $cluster variable set.
# 3rd argument and so forth get passed to the command.
function run_consecutive() {
    local cluster
    for cluster in $1; do
       "${@:2}" |& sed "/\[${cluster}]/!s/^/[${cluster}] /"
    done
}

# Run cluster commands in parallel.
# 1st argument is the cluster names for which to run.
# 2nd argument is the command to execute, which will have the $cluster variable set.
# 3rd argument and so forth get passed to the command.
function run_parallel() {
    local DEBUG_PRINT=false
    local cluster
    declare -A pids
    for cluster in $1; do
        (
           set -o pipefail
           DEBUG_PRINT=${ORIG_DEBUG_PRINT}
           "${@:2}" |& sed "/cl=${cluster}/!s/^/[${cluster}] /"
        ) &
        pids["${cluster}"]=$!
    done

    for pid in "${pids[@]}"; do
        wait $pid
    done
}

# Run the given command (with any arguments) in parallel on all the clusters.
function run_all_clusters() {
    if [[ "${PARALLEL}" == "true" ]]; then
        run_parallel "${clusters[*]}" "$@"
    else
        run_consecutive "${clusters[*]}" "$@"
    fi
}

# Run the given command (with any arguments) in parallel on the clusters that install submariner.
function run_subm_clusters() {
    local DEBUG_PRINT=false
    local cluster subm_clusters=()
    for cluster in "${clusters[@]}"; do
        [[ "${cluster_subm[${cluster}]}" != "true" ]] || subm_clusters+=( "${cluster}" )
    done

    if [[ "${PARALLEL}" == "true" ]]; then
        run_parallel "${subm_clusters[*]}" "$@"
    else
        run_consecutive "${subm_clusters[*]}" "$@"
    fi
}

function registry_running() {
    docker ps --filter name="^/?$KIND_REGISTRY$" | grep $KIND_REGISTRY
    return $?
}

function add_cluster_cidrs() {
    local val=$1
    local idx=$2

    if [[ "${GLOBALNET}" == "true" ]]; then
        val="0"
        global_CIDRs[$idx]="242.254.${1}.0/24"
    fi

    cluster_CIDRs[$idx]="10.$((val+129)).0.0/16"
    service_CIDRs[$idx]="100.$((val+65)).0.0/16"
}

function declare_cidrs() {
    local DEBUG_PRINT=false
    # shellcheck disable=SC2034 # these variables are used elsewhere
    declare -gA cluster_CIDRs service_CIDRs global_CIDRs
    local cluster i=1

    for cluster in "${clusters[@]}"; do
        add_cluster_cidrs "$i" "$cluster"
        i=$(("$i"+1))
    done
}

function declare_kubeconfig() {
    source "${SCRIPTS_DIR}"/lib/kubecfg
}

function print_clusters_message() {
    local DEBUG_PRINT=false
    cat << EOM
Your virtual cluster(s) are deployed and working properly and can be accessed with:

export KUBECONFIG=\$(find \$(git rev-parse --show-toplevel)/output/kubeconfigs/ -type f -printf %p:)

$ kubectl config use-context cluster1 # or cluster2, cluster3..

To clean everthing up, just run: make clean-clusters
EOM
}

# Run shell function if it is defined
# 1st argument is the name of the function.
# 2nd argument and so forth get passed to the function.
function run_if_defined() {
    local func=$1
    type -t "${func}" | grep -q function || return 0
    "${func}" "${@:2}"
}

function load_settings() {
    local DEBUG_PRINT=false
    expect_env SETTINGS "Deployment settings file"
    declare -ga clusters
    declare -gA cluster_cni cluster_nodes cluster_subm cluster_gateways

    local cluster_count
    cluster_count=$(_yq ".cluster-count")
    if [[ -n "${cluster_count}" ]]; then
        readarray -t clusters < <(seq 1 "${cluster_count}" | sed 's/^/cluster/')
        broker="${clusters[0]}"
    else
        readarray -t clusters < <(_yq ".clusters | keys | .[]")

        # Determine broker, default to first declared cluster
        broker=$(_yq ".clusters[] | select(. | has(\"broker\")) | path | .[-1] // \"${clusters[0]}\"")
    fi

    # Determine per cluster settings, default to global if not defined
    local cluster
    for cluster in "${clusters[@]}"; do
        cluster_cni["${cluster}"]=$(_yq ".clusters.${cluster}.cni // .cni")
        cluster_nodes["${cluster}"]=$(_yq ".clusters.${cluster}.nodes // .nodes")
        cluster_subm["${cluster}"]=$(_yq ".clusters.${cluster}.submariner")
        cluster_subm["${cluster}"]=$(_yq ".submariner")
        cluster_gateways["${cluster}"]=$(_yq ".clusters.${cluster}.gateways // .gateways")
    done

    cat << EOM
Cluster settings::
  broker - ${broker@Q}
  clusters - ${clusters[*]@Q}
  cni - $(typeset -p cluster_cni | cut -f 2- -d=)
  nodes per cluster - $(typeset -p cluster_nodes | cut -f 2- -d=)
  install submariner - $(typeset -p cluster_subm | cut -f 2- -d=)
  label cluster gateways - $(typeset -p cluster_gateways | cut -f 2- -d=)
EOM
}

function _yq() {
    local output
    output=$(yq e "$*" "${SETTINGS}")
    [[ "${output}" == "null" ]] || echo "${output}"
}

function print_env() {
    local DEBUG_PRINT=false
    echo "Running with environment variables:"
    for var; do
        declare -n value="$var"
        printf '%s=%q\n' "$var" "$value"
    done
}

# Load a library to provide a pluggable command.
# 1st parameter is the command e.g. `clusters`, `deploy`, etc
# 2nd parameter is the name of the variable that determines the library variant
function load_library() {
    local cmnd="$1"
    local lib_var="$2"
    declare -n library="${lib_var}"

    [[ -n "${library}" ]] || exit_error "No ${lib_var} specified, please specify a ${lib_var}."

    local lib_file="${SCRIPTS_DIR}/lib/${cmnd}_${library//-/_}"
    [[ -f "$lib_file" ]] || exit_error "Unknown ${lib_var} ${library@Q}"

    echo "Will use ${library@Q} for ${cmnd}"
    . "$lib_file"
}
