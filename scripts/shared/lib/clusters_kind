# shellcheck shell=bash
# shellcheck disable=SC2034 # As this is dynamically loaded, some variables appear unused

### Variables ###

## Kubernetes version mapping, as supported by kind ##
# See the release notes of the kind version in use
declare -gA kind_k8s_versions kind_binaries
# kind-0.12 hashes
kind_k8s_versions[1.17]=1.17.17@sha256:e477ee64df5731aa4ef4deabbafc34e8d9a686b49178f726563598344a3898d5
kind_binaries[1.17]='kind-0.12'
# kind-0.15 hashes
kind_k8s_versions[1.18]=1.18.20@sha256:61c9e1698c1cb19c3b1d8151a9135b379657aee23c59bde4a8d87923fcb43a91
kind_k8s_versions[1.19]=1.19.16@sha256:707469aac7e6805e52c3bde2a8a8050ce2b15decff60db6c5077ba9975d28b98
kind_k8s_versions[1.20]=1.20.15@sha256:d67de8f84143adebe80a07672f370365ec7d23f93dc86866f0e29fa29ce026fe
kind_k8s_versions[1.21]=1.21.14@sha256:f9b4d3d1112f24a7254d2ee296f177f628f9b4c1b32f0006567af11b91c1f301
kind_k8s_versions[1.22]=1.22.13@sha256:4904eda4d6e64b402169797805b8ec01f50133960ad6c19af45173a27eadf959
kind_k8s_versions[1.23]=1.23.10@sha256:f047448af6a656fae7bc909e2fab360c18c487ef3edc93f06d78cdfd864b2d12
kind_k8s_versions[1.24]=1.24.4@sha256:adfaebada924a26c2c9308edd53c6e33b3d4e453782c0063dc0028bdebaddf98
kind_k8s_versions[1.25]=1.25.0@sha256:428aaa17ec82ccde0131cb2d1ca6547d13cf5fdabcc0bbecf749baa935387cbf

### Functions ###

function generate_cluster_yaml() {
    # These are used by render_template
    local pod_cidr service_cidr dns_domain disable_cni
    pod_cidr="${cluster_CIDRs[${cluster}]}"
    service_cidr="${service_CIDRs[${cluster}]}"
    dns_domain="${cluster}.local"
    disable_cni="false"
    [[ -z "${cluster_cni[$cluster]}" ]] || disable_cni="true"

    local nodes
    for node in ${cluster_nodes[${cluster}]}; do nodes="${nodes}"$'\n'"- role: $node"; done

    render_template "${RESOURCES_DIR}/kind-cluster-config.yaml" > "${RESOURCES_DIR}/${cluster}-config.yaml"
}

function kind_fixup_config() {
    local master_ip
    master_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "${cluster}-control-plane" | head -n 1)
    yq -i ".clusters[0].cluster.server = \"https://${master_ip}:6443\"" "${KUBECONFIG}"
    yq -i "(.. | select(. == \"kind-${cluster}\")) = \"${cluster}\"" "${KUBECONFIG}"
    chmod a+r "${KUBECONFIG}"
}

# In development environments where clusters are brought up and down
# multiple times, several Docker images are repeatedly pulled and deleted,
# leading to the Docker error:
#   "toomanyrequests: You have reached your pull rate limit"
# Preload the KIND image. Also tag it so the `docker system prune` during
# cleanup won't remove it.
function download_kind() {
    if [[ -z "${K8S_VERSION}" ]]; then
        echo "K8S_VERSION not set."
        return
    fi

    # Example: kindest/node:v1.20.7@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
    kind_image="kindest/node:v${K8S_VERSION}"
    # Example: kindest/node:v1.20.7
    kind_image_tag=kindest/node:v$(echo "${K8S_VERSION}" | awk -F"@" '{print $1}')
    # Example: kindest/node:@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
    kind_image_sha=kindest/node@$(echo "${K8S_VERSION}" | awk -F"@" '{print $2}')

    # Check if image is already present, and if not, download it.
    echo "Processing Image: $kind_image_tag ($kind_image)"
    if [[ -n $(docker images -q "$kind_image_tag") ]] ; then
        echo "Image $kind_image_tag already downloaded."
        return
    fi

    echo "Image $kind_image_tag not found, downloading..."
    if ! docker pull "$kind_image"; then
        echo "**** 'docker pull $kind_image' failed. Manually run. ****"
        return
    fi

    image_id=$(docker images -q "$kind_image_sha")
    if ! docker tag "$image_id" "$kind_image_tag"; then
        echo "'docker tag ${image_id} ${kind_image_tag}' failed."
    fi
}

function provider_create_cluster() {
    export KUBECONFIG=${KUBECONFIGS_DIR}/kind-config-${cluster}
    rm -f "$KUBECONFIG"

    if "${kind}" get clusters | grep -q "^${cluster}$"; then
        echo "KIND cluster already exists, skipping its creation..."
        "${kind}" export kubeconfig --name="${cluster}"
        kind_fixup_config
        return
    fi

    echo "Creating KIND cluster..."
    if [[ "${cluster_cni[$cluster]}" == "ovn" ]]; then
        deploy_kind_ovn
        return
    fi

    generate_cluster_yaml
    local image_flag=''
    [[ -z "${K8S_VERSION}" ]] || image_flag="--image=kindest/node:v${K8S_VERSION}"

    "${kind}" version
    cat "${RESOURCES_DIR}/${cluster}-config.yaml"
    "${kind}" create cluster ${image_flag:+"$image_flag"} --name="${cluster}" --config="${RESOURCES_DIR}/${cluster}-config.yaml"
    kind_fixup_config

    [[ -n "${cluster_cni[$cluster]}" ]] || delete_cluster_on_fail schedule_dummy_pod
    [[ "$LOAD_BALANCER" != true ]] || delete_cluster_on_fail deploy_load_balancer
    [[ "$AIR_GAPPED" != true ]] || air_gap_iptables
}

# This is a workaround and can be removed once we switch the CNI from kindnet to a different one.
# In order to support health-check and hostNetwork use-cases, submariner requires an IPaddress from the podCIDR
# for each node in the cluster. Normally, most of the CNIs create a cniInterface on the host and assign an IP
# from the podCIDR to the interface. Submariner relies on this interface to support the aforementioned use-cases.
# However, with kindnet CNI, it was seen that it does not create a dedicated CNI Interface on the nodes.
# But as soon as a pod is scheduled on a node, it creates a veth-xxx interface which has an IPaddress from the
# podCIDR. In this workaround, we are scheduling a dummy pod as a demonSet on the cluster to trigger the creation
# of this veth-xxx interface which can be used as a cniInterface and we can continue to validate Submariner use-cases.
function schedule_dummy_pod() {
    local ns="subm-kindnet-workaround"
    source "${SCRIPTS_DIR}"/lib/deploy_funcs
    import_image "${REPO}/nettest"

    echo "Creating the ${ns} namespace..."
    kubectl create namespace "${ns}" || :
    deploy_resource "${RESOURCES_DIR}"/dummypod.yaml "$ns"
}

function delete_cluster_on_fail() {
    ( "$@"; ) &
    if ! wait $! ; then
        echo "Failed to run '$*', removing the cluster"
        kubectl cluster-info dump || echo "Can't get cluster info" 1>&2
        "${kind}" delete cluster --name="${cluster}"
        return 1
    fi
}

function air_gap_iptables() {
    local DEBUG_PRINT=false

    for node in $(docker ps | grep -w "${cluster}-[-a-z0-9]*" | cut -f1 -d' '); do
        # Allow any non-routable networks, and the globalnet one (240/4)
        for net in 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 172.16.0.0/12 240.0.0.0/4; do
            docker exec "$node" iptables -A OUTPUT -d "$net" -j ACCEPT
        done

        docker exec "$node" iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
        docker exec "$node" iptables -A OUTPUT -j REJECT
    done
}

function deploy_load_balancer() {
    local kind_ip start_ip end_ip net_addr
    kind_ip=$(docker network inspect -f '{{.IPAM.Config}}' kind | awk '/.*/ { print $2 }')
    net_addr=$(echo "${cluster_CIDRs[$cluster]}" | cut -f2 -d'.')
    [[ "$GLOBALNET" != true ]] || net_addr=$(echo "${global_CIDRs[$cluster]}" | cut -f3 -d'.')
    start_ip=$(echo "$kind_ip" | cut -f1-2 -d'.')."$net_addr".100
    end_ip=$(echo "$start_ip" | cut -f1-3 -d'.').250

    kubectl apply -f "https://raw.githubusercontent.com/metallb/metallb/v${METALLB_VERSION}/config/manifests/metallb-native.yaml"
    kubectl wait --for=condition=Ready pods -l app=metallb -n metallb-system --timeout="${TIMEOUT}"
    kubectl apply -f - <<EOF
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: submariner-pool
  namespace: metallb-system
spec:
  addresses:
  - ${start_ip}-${end_ip}
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: submariner-l2
  namespace: metallb-system
EOF
}

function deploy_kind_ovn(){
    export K8s_VERSION="${K8S_VERSION}"
    export NET_CIDR_IPV4="${cluster_CIDRs[${cluster}]}"
    export SVC_CIDR_IPV4="${service_CIDRs[${cluster}]}"
    export KIND_CLUSTER_NAME="${cluster}"

    local ovn_flags=()
    [[ "$OVN_IC" != true ]] || ovn_flags=( -ic -npz 1 -wk 3 )
    delete_cluster_on_fail ./ovn-kubernetes/contrib/kind.sh -ov "$OVN_IMAGE" -cn "${KIND_CLUSTER_NAME}" -ric "${ovn_flags[@]}" -lr -dd "${KIND_CLUSTER_NAME}.local"

    [[ "$AIR_GAPPED" = true ]] && air_gap_iptables
}

function run_local_registry() {
    # Run a local registry to avoid loading images manually to kind
    if registry_running; then
        echo "Local registry $KIND_REGISTRY already running."
        return 0
    fi

    echo "Deploying local registry $KIND_REGISTRY to serve images centrally."
    local volume_dir="/var/lib/registry"
    local volume_flag="/dev/shm/${KIND_REGISTRY}:${volume_dir}"
    selinuxenabled && volume_flag="${volume_flag}:z" 2>/dev/null
    docker run -d -v "${volume_flag}" -p 127.0.0.1:5000:5000 --restart=always --name "$KIND_REGISTRY" registry:2
    docker network connect kind "$KIND_REGISTRY" || true

    # If the local volume mount directory is empty, probably due to a host reboot,
    # then try to push any images with "localhost:5000".
    if [[ -z $(docker exec -e tmp_dir="${volume_dir}" "${KIND_REGISTRY}" /bin/sh -c 'ls -A "${tmp_dir}" 2>/dev/null') ]]; then
        echo "Push images to local registry: $KIND_REGISTRY"
        readarray -t local_image_list < <(docker images | awk -F' ' '/localhost:5000/ {print $1":"$2}')
        for image in "${local_image_list[@]}"; do
            docker push "${image}" || echo "Failed to push ${image@Q} to registry."
        done
    fi
}

function provider_failed() {
    if [[ "$(cat /proc/sys/fs/inotify/max_user_instances)" -lt 512 ]]; then
        echo "Your inotify settings are lower than our recommendation."
        echo "This may cause failures in large deployments, but we don't know if it caused this failure."
        echo "You may need to increase your inotify settings (currently $(cat /proc/sys/fs/inotify/max_user_watches) and $(cat /proc/sys/fs/inotify/max_user_instances)):"
        echo sudo sysctl fs.inotify.max_user_watches=524288
        echo sudo sysctl fs.inotify.max_user_instances=512
        echo 'See https://kind.sigs.k8s.io/docs/user/known-issues/#pod-errors-due-to-too-many-open-files'
    fi
}

# If any of the clusters use OVN-K as the CNI then clone the
# ovn-kubernetes repo from master in order to access the required
# kind scripts, and manifest generation templates.
function download_ovnk() {
    echo "Cloning ovn-kubernetes source"
    mkdir -p ovn-kubernetes
    # We only need the contrib directory, use a sparse checkout
    (
        cd ovn-kubernetes || exit
        git init
        git config core.sparseCheckout true
        echo contrib/ > .git/info/sparse-checkout
        echo dist/ >> .git/info/sparse-checkout
        if git remote add -f origin https://github.com/ovn-org/ovn-kubernetes.git; then
            git pull origin master
        else
            git fetch && git reset --hard origin/master
        fi
    )
}

function prepare_ovn_ic() {
    echo "Building ovn-kubernetes with interconnect (OVN-IC) from source"
    echo "This will become unnecessary if OVN CI image publishing is fixed"
    echo "https://github.com/ovn-org/ovn-kubernetes/actions/workflows/docker.yml"
    rm -rf ovn-kubernetes
    git clone https://github.com/ovn-org/ovn-kubernetes
    pushd ovn-kubernetes || exit

    make -C go-controller

    cp go-controller/_output/go/bin/* dist/images

    echo "ref: $(git rev-parse --symbolic-full-name HEAD) commit: $(git rev-parse HEAD)" > dist/images/git_info
    docker build -t "${OVN_IMAGE}" -f dist/images/Dockerfile.fedora dist/images/
    docker push "${OVN_IMAGE}"

    popd || exit
}

function prepare_ovn() {
    export OVN_IMAGE="localhost:5000/ovn-daemonset-f:latest"

    if [[ "$OVN_IC" = true ]]; then
        prepare_ovn_ic
        return
    fi

    download_ovnk

    local OVN_SRC_IMAGE="ghcr.io/ovn-org/ovn-kubernetes/ovn-kube-f:master"
    docker pull "${OVN_SRC_IMAGE}"
    docker tag "${OVN_SRC_IMAGE}" "${OVN_IMAGE}"
    docker push "${OVN_IMAGE}"
}

function provider_prepare() {
    [[ -z "${K8S_VERSION}" ]] && K8S_VERSION="${DEFAULT_K8S_VERSION}"
    kind="${kind_binaries[$K8S_VERSION]:-kind}"
    [[ -n "${kind_k8s_versions[$K8S_VERSION]}" ]] && K8S_VERSION="${kind_k8s_versions[$K8S_VERSION]}"

    download_kind
    run_local_registry
    [[ "${cluster_cni[*]}" != *"ovn"* ]] || prepare_ovn
}
