# shellcheck shell=bash
# shellcheck source=scripts/shared/lib/source_only
. "${BASH_SOURCE%/*}"/source_only

### Constants ###
readonly SUBM_GROUP="submariner-group"
readonly SUBM_SUB="submariner-subscription"
readonly SUBM_OPERATOR_NAME="submariner"

# Variables

BROKER_K8S_API_SERVER=""
BROKER_K8S_API_SERVER_TOKEN=""
BROKER_K8S_CA=""

### Functions ###

function deploytool_prereqs() {
  expect_env SUBM_NS
  expect_env SUBM_CS
  expect_env SUBM_INDEX_IMG

  # Create new namespace
  run_subm_clusters "create_namespace ${SUBM_NS}"

  # Create the custom catalog source
  run_subm_clusters "create_catalog_source ${SUBM_CS} ${SUBM_NS} ${SUBM_INDEX_IMG}"

  # Create the operator group
  run_subm_clusters "create_operator_group ${SUBM_GROUP} ${SUBM_NS}"

  # Install the submariner operator bundle
  run_subm_clusters "install_bundle ${SUBM_SUB} ${SUBM_CS} ${SUBM_NS} ${SUBM_OPERATOR_NAME}"
}

function setup_broker() {
  local brokerClientSecret

  if ! (timeout 5m bash -c "until kubectl --context=${cluster} get crds brokers.submariner.io > /dev/null 2>&1; do sleep 10; done"); then
      exit_error "Broker CRD was not found."
  fi

  # Create the broker Namespace & RBAC
  echo "[INFO] Deploy the broker"
  if [ -d "${DAPPER_SOURCE}"/config/broker ]; then
    kubectl apply -k "${DAPPER_SOURCE}"/config/broker -n "${BROKER_NAMESPACE}"
  else
    [ -d /tmp/submariner-operator ] && rm -Rf /tmp/submariner-operator
    git clone --depth 1 --single-branch --branch "${BASE_BRANCH}" https://github.com/submariner-io/submariner-operator /tmp/submariner-operator
    kubectl apply -k /tmp/submariner-operator/config/broker -n "${BROKER_NAMESPACE}"
  fi

  # Enable the service-discovery component if defined
  local components="connectivity"
  components+=$([[ "${LIGHTHOUSE}" == "true" ]] && echo ", service-discovery" || echo "")
  components+=$([[ "${GLOBALNET}" == "true" ]] && echo ", globalnet" || echo "")

  ### Create the Broker instance
  render_template "${RESOURCES_DIR}"/bundle/broker.yaml | kubectl apply -f -

  echo "[INFO] Wait for the broker readiness..."
  if ! (timeout 5m bash -c "until kubectl --context=${cluster} get brokers.submariner.io submariner-broker -n ${SUBM_NS} > /dev/null 2>&1; do sleep 10; done"); then
      exit_error "Broker is not ready."
  fi

  brokerClientSecret=$(kubectl -n "${BROKER_NAMESPACE}" get secrets -o json | jq -r -c '[.items[] | select(.metadata.annotations."kubernetes.io/service-account.name"=="'"${BROKER_CLIENT_SA}"'") | select(.data.token != null) | select(.data."ca.crt" != null)] | .[0]')
  # shellcheck disable=SC2034 # this variable is used elsewhere
  BROKER_K8S_API_SERVER=$(kubectl get endpoints kubernetes -n default -o jsonpath="{.subsets[0].addresses[0].ip}:{.subsets[0].ports[?(@.name=='https')].port}")
  # shellcheck disable=SC2034 # this variable is used elsewhere
  BROKER_K8S_API_SERVER_TOKEN=$(echo "${brokerClientSecret}" | jq -r '.data.token' | base64 --decode)
  # shellcheck disable=SC2034 # this variable is used elsewhere
  BROKER_K8S_CA=$(echo "${brokerClientSecret}" | jq -r '.data."ca.crt"')

}

function install_subm() {
  if [[ ${cluster_subm[$cluster]} != "true" ]]; then
        echo "Skipping installation as requested in cluster settings"
        return
  fi

  if kubectl wait --for=condition=Ready pods -l app=submariner-operator -n "${SUBM_NS}" --timeout=60s > /dev/null 2>&1; then
        echo "[WARN](${cluster}) Submariner already installed, skipping installation..."
        return
  fi

  if ! (timeout 5m bash -c "until kubectl --context=${cluster} get crds submariners.submariner.io > /dev/null 2>&1; do sleep 10; done"); then
      exit_error "Submariner CRD was not found."
  fi

  # Create the Submariner instance
  echo "[INFO](${cluster}) Deploy Submariner"
  render_template "${RESOURCES_DIR}"/bundle/submariner.yaml | kubectl apply -f -

echo "[INFO](${cluster}) Submariner deployed"
}

function install_subm_all_clusters() {
    run_subm_clusters install_subm
}
