# shellcheck shell=bash
# shellcheck source=scripts/shared/lib/source_only
. "${BASH_SOURCE%/*}"/source_only

### Functions ###

function import_image() {
    local orig_image=$1
    local versioned_image="$1:$VERSION"
    local local_image="localhost:5000/${orig_image##*/}:local"
    if ! docker tag "${versioned_image}" "${local_image}"; then
        # The project doesn't build this image, pull it
        docker pull "${orig_image}:latest"
        docker tag "${orig_image}:latest" "${versioned_image}"
        docker tag "${versioned_image}" "${local_image}"
    fi

    docker push "${local_image}"
}

function get_globalip() {
    local svc_name=$1
    local gip
    gip=$(kubectl get svc "$svc_name" -o jsonpath='{.metadata.annotations.submariner\.io/globalIp}')
    if [[ -z "${gip}" ]]; then
        sleep 1
        return 1
    fi

    echo "$gip"
}

function get_svc_ip() {
    local svc_name=$1
    local svc_ip

    if [[ $globalnet = "true" ]]; then
        svc_ip=$(with_retries 30 get_globalip "${svc_name}")
    else
        svc_ip=$(kubectl --context="$cluster" get svc -l "app=${svc_name}" | awk 'FNR == 2 {print $3}')
    fi

    if [[ -z "$svc_ip" ]]; then
        echo "Failed to get ${svc_name} IP"
        exit 1
    fi

    echo "$svc_ip"
}

function test_connection() {
    local source_pod=$1
    local target_address=$2

    echo "Attempting connectivity between clusters - $source_pod (cluster2) --> $target_address (service on cluster3)"
    if ! kubectl exec "${source_pod}" -- curl --output /dev/null -m 30 --silent --head --fail "${target_address}"; then
        return 1
    fi

    echo "Connection test was successful!"
}

function connectivity_tests() {
    local netshoot_pod nginx_svc_ip
    netshoot_pod=$(kubectl get pods -l app=netshoot | awk 'FNR == 2 {print $1}')
    nginx_svc_ip=$(with_context cluster3 get_svc_ip nginx-demo)

    with_retries 5 test_connection "$netshoot_pod" "$nginx_svc_ip"
}

function add_subm_gateway_label() {
    [[ ${cluster_subm[$cluster]} = "true" ]] || return 0
    kubectl label node "${cluster}-worker" "submariner.io/gateway=true" --overwrite
}

function del_subm_gateway_label() {
    [[ ${cluster_subm[$cluster]} = "true" ]] || return 0
    kubectl label node "${cluster}-worker" "submariner.io/gateway-" --overwrite
}

function prepare_cluster() {
    local namespace=$1
    [[ ${cluster_subm[$cluster]} = "true" ]] || return 0
    for app in submariner-engine submariner-routeagent submariner-globalnet; do
        if kubectl wait --for=condition=Ready pods -l "app=$app" -n "$namespace" --timeout=60s > /dev/null 2>&1; then
            echo "Removing $app pods..."
            kubectl delete pods -n "$namespace" -l "app=$app"
        fi
    done
    add_subm_gateway_label
}

function deploy_resource() {
    local resource_file=$1
    local resource_name
    resource_name=$(basename "$resource_file" ".yaml")
    kubectl apply -f "${resource_file}"
    echo "Waiting for ${resource_name} pods to be ready."
    kubectl rollout status "deploy/${resource_name}" --timeout=120s
}

function load_deploytool() {
    local deploytool=$1
    local deploy_lib=${SCRIPTS_DIR}/lib/deploy_${deploytool}
    if [[ ! -f $deploy_lib ]]; then
        echo "Unknown deploy method: ${deploytool}"
        exit 1
    fi

    echo "Will deploy submariner using ${deploytool}"
    . "$deploy_lib"
}

