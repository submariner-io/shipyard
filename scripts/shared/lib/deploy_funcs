# shellcheck shell=bash
# shellcheck source=scripts/shared/lib/source_only
. "${BASH_SOURCE%/*}"/source_only

### Global Variables ###

# shellcheck disable=SC2034
SUBM_IMAGE_REPO=localhost:5000
# shellcheck disable=SC2034
SUBM_IMAGE_TAG="${IMAGE_TAG}"

### Functions ###

function import_image() {
    local orig_image=$1
    local versioned_image="$1:${DEV_VERSION}"
    local local_image="localhost:5000/${orig_image##*/}:${2:-local}"
    if ! docker tag "${versioned_image}" "${local_image}"; then
        # The project doesn't build this image, pull it
        docker pull "${orig_image}:${CUTTING_EDGE}"
        docker tag "${orig_image}:${CUTTING_EDGE}" "${versioned_image}"
        docker tag "${versioned_image}" "${local_image}"
    fi

    docker push "${local_image}"
}

function get_globalip() {
    local svc_name=$1
    local gip
    gip=$(kubectl get svc "$svc_name" -o jsonpath='{.metadata.annotations.submariner\.io/globalIp}')
    if [[ -z "${gip}" ]]; then
        gip=$(kubectl get giip "$svc_name" -o jsonpath='{.status.allocatedIP}')
        if [[ -z "${gip}" ]]; then
            sleep 1
            return 1
        fi
    fi

    echo "$gip"
}

function get_svc_ip() {
    local svc_name=$1
    local svc_ip

    if [[ "${GLOBALNET}" = "true" ]]; then
        svc_ip=$(with_retries 30 get_globalip "${svc_name}")
    else
        svc_ip=$(kubectl --context="$cluster" get svc -l "app=${svc_name}" | awk 'FNR == 2 {print $3}')
    fi

    [[ -n "$svc_ip" ]] || exit_error "Failed to get ${svc_name} IP"
    echo "$svc_ip"
}

function test_connection() {
    local source_pod=$1
    local target_address=$2

    echo "Attempting connectivity between clusters - $source_pod --> $target_address"
    kubectl exec "${source_pod}" -- curl --output /dev/null -m 10 --silent --head --fail "${target_address}"
    echo "Connection test was successful!"
}

function connectivity_tests() {
    target_cluster="$1"

    deploy_resource "${RESOURCES_DIR}/netshoot.yaml"
    with_context "$target_cluster" deploy_resource "${RESOURCES_DIR}/nginx-demo.yaml"

    local netshoot_pod
    netshoot_pod=$(kubectl get pods -l app=netshoot | awk 'FNR == 2 {print $1}')
    local nginx_svc=nginx-demo.default.svc.clusterset.local
    [[ "$LIGHTHOUSE" = true ]] || nginx_svc=$(with_context "$target_cluster" get_svc_ip nginx-demo)

    with_retries 10 sleep_on_fail 10s test_connection "$netshoot_pod" "$nginx_svc"

    remove_resource "${RESOURCES_DIR}/netshoot.yaml"
    with_context "$target_cluster" remove_resource "${RESOURCES_DIR}/nginx-demo.yaml"
}

function verify_gw_status() {
    sleep_duration=8
    # helm doesn't use the operator yet, and connection status is based on the operator object
    if subctl show connections 2>&1 | grep "the server could not find the requested resource"; then
        return 0
    fi

    if ! subctl show connections | grep "connected"; then
       echo "iter: $iteration. Clusters not yet connected. sleeping for $sleep_duration secs"
       sleep $sleep_duration
    else
       return 0
    fi
    return 1
}

function deploy_resource() {
    local resource_file=$1
    local ns=${2:-default}
    local resource_name resource
    resource_name=$(basename "$resource_file" ".yaml")
    render_template "${resource_file}" | kubectl apply -f -

    for kind in Deployment DaemonSet; do
        resource=$(yq e ".metadata.name == \"${resource_name}\" | parent | parent | select(.kind == \"${kind}\")" "$resource_file")
        [[ -n "$resource" ]] || continue

        echo "Waiting for ${kind} ${resource_name} to be ready."
        kubectl rollout status -n "$ns" "${kind,,}/${resource_name}" --timeout="${TIMEOUT}"
    done
}

function remove_resource() {
    local resource_file=$1
    render_template "${resource_file}" | kubectl delete -f -
}

function find_submariner_namespace() {
    local namespace
    namespace="$(kubectl get pods --all-namespaces | awk '/submariner/{ print $1 }' | grep -v broker | head -n 1)"
    [[ -n "${namespace}" ]] || exit_error "Could not find a Submariner deployment namespace"
    echo "${namespace}"
}

function reload_pods() {
    local resource_type=$1 # the resource type can be deployment or daemonset
    local resource_name=$2 # the name of the resource
    local namespace
    namespace="$(find_submariner_namespace)"

    kubectl patch -n "${namespace}" "${resource_type}" "${resource_name}" \
              --type='json' \
              -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value": "Always" },{"op": "replace", "path": "/spec/template/metadata/labels/modified", "value": "'"$(date +%s)"'"}]'
}
