# shellcheck shell=bash

. "${SCRIPTS_DIR}/lib/ocp_utils"

### Functions ###

function provider_prepare() {
    ensure_openshift_install
    create_ocp_template "$OCP_TEMPLATE_DIR" OCP
}

# Creates template for installation, which can be used for deploying platforms on top of an OCP install.
function create_ocp_template() {
    local directory=$1
    local type=$2

    if [[ -d "$directory" ]]; then
        echo "Reusing existing template for ${type} install."
        echo "If you'd like to reinstall, please run 'make clean using=${PROVIDER}' and try again."
        return 0
    fi

    rm -rf "$directory"
    echo "Creating an initial configuration template for ${type}."
    echo "Please fill out all the necessary details."
    echo "Note: The cluster name will be suffixed (eg with '-cluster1'), please fill out just the prefix."
    "$OCP_INSTALLER" create install-config --dir "$directory"
}

function provider_create_cluster() {
    export KUBECONFIG=${KUBECONFIGS_DIR}/ocp-${cluster}

    if kubectl cluster-info > /dev/null 2>&1; then
        echo "OCP cluster already exists, skipping its creation..."
        return 0
    fi

    configure_ocp_cluster "$OCP_TEMPLATE_DIR"
    deploy_ocp_cluster "$OCP_TEMPLATE_DIR" OCP
}

function configure_ocp_cluster() {
    local template_dir=$1
    local install_dir=${template_dir/template/${cluster}}
    local install_config=${install_dir}/install-config.yaml
    local control_replicas compute_replicas
    control_replicas=$(echo "${cluster_nodes[${cluster}]}" | tr ' ' '\n' | grep -wc 'control-plane')
    compute_replicas=$(echo "${cluster_nodes[${cluster}]}" | tr ' ' '\n' | grep -wc 'worker')

    # OCP needs at least 1 compute node to work properly
    [[ "$compute_replicas" -gt 0 ]] || compute_replicas=1

    rm -rf "$install_dir"
    cp -r "$template_dir" "$install_dir"
    yq -i ".metadata.name += \"-${cluster}\"" "$install_config"
    yq -i ".networking.clusterNetwork[0].cidr = \"${cluster_CIDRs[${cluster}]}\"" "$install_config"
    yq -i ".networking.serviceNetwork[0] = \"${service_CIDRs[${cluster}]}\"" "$install_config"
    yq -i ".controlPlane.replicas = ${control_replicas}" "$install_config"
    yq -i ".compute[0].replicas = ${compute_replicas}" "$install_config"

    echo "Updated install config:"
    yq "del(.pullSecret)" "$install_config"
}

function deploy_ocp_cluster() {
    local template_dir=$1
    local type=$2
    local install_dir=${template_dir/template/${cluster}}

    rm -f "$KUBECONFIG"
    echo "Creating ${type} cluster..."

    if ! "$OCP_INSTALLER" create cluster --dir "$install_dir"; then
        echo "Failed to create ${type} cluster, removing the cluster"
        "$OCP_INSTALLER" destroy cluster --dir "$install_dir"
        return 1
    fi

    local kubeconfig=${install_dir}/auth/kubeconfig
    yq -i "(.. | select(. == \"admin\")) = \"${cluster}\"" "$kubeconfig"
    cp "$kubeconfig" "$KUBECONFIG"
}
