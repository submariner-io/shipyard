---
name: Consuming Projects

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]

jobs:
  e2e:
    name: E2E
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: |
      ( github.event.action == 'labeled' && github.event.label.name == 'e2e-projects' )
      || ( github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'e2e-projects') )
    strategy:
      fail-fast: false
      matrix:
        project: ['admiral', 'submariner', 'submariner-operator', 'lighthouse']
        deploytool: ['operator', 'helm']
        exclude:
          - project: admiral
            deploytool: helm
          - project: submariner-operator
            deploytool: helm
    steps:
      - name: Check out the Shipyard repository
        uses: actions/checkout@v2

      - name: Reclaim free space!
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          df -h
          free -h

      - name: Build the latest Shipyard image
        run: make images

      - name: Check out the ${{ matrix.project }} repository
        uses: actions/checkout@v2
        with:
          repository: submariner-io/${{ matrix.project }}

      - name: Make sure ${{ matrix.project }} is using the built Shipyard image
        run: sed -i 's/shipyard-dapper-base:*.*/shipyard-dapper-base:dev/' Dockerfile.dapper

      - name: Run E2E deployment and tests
        run: make e2e using=${{ matrix.deploytool }}

      - name: Post mortem
        if: failure()
        run: |
          df -h
          free -h
          make post-mortem

  lint-consuming:
    name: Lint
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: |
      ( github.event.action == 'labeled' && github.event.label.name == 'lint-projects' )
      || ( github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'lint-projects') )
    strategy:
      fail-fast: false
      matrix:
        project: ['admiral', 'submariner', 'submariner-operator', 'lighthouse']
    steps:
      - name: Check out the Shipyard repository
        uses: actions/checkout@v2

      - name: Build the latest Shipyard image
        run: make images

      - name: Check out the ${{ matrix.project }} repository
        uses: actions/checkout@v2
        with:
          repository: submariner-io/${{ matrix.project }}

      - name: Make sure ${{ matrix.project }} is using the built Shipyard image
        run: sed -i 's/shipyard-dapper-base:*.*/shipyard-dapper-base:dev/' Dockerfile.dapper

      - name: Run all linters
        run: make lint
