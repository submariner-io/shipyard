---
name: 'End to End'
description: 'Runs end to end tests with multiple clusters'
inputs:
  cache:
    description: 'Location of the cache'
    required: false
    default: '~/image-cache'
  k8s_version:
    description: 'Version of Kubernetes to use for clusters'
    required: false
    default: '1.25'
  using:
    description: 'Various options to pass via using="..."'
    required: false
  working-directory:
    description: 'Working directory to run in'
    required: false
    default: '.'
  target:
    description: 'Target for make'
    required: false
    default: 'e2e'
  test_args:
    description: 'Extra arguments to pass to E2E tests'
    required: false
    default: '--ginkgo.fail-fast'
  testdir:
    description: 'Where to look for the E2E tests'
    required: false
    default: 'test/e2e'
  plugin:
    description: 'Path to the plugin that has pre/post hooks'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - shell: bash
      run: echo "DEBUG_PRINT=true" >> $GITHUB_ENV
    - shell: bash
      run: |
        echo "::group::Reclaiming free space"
        # Clean up tools we don't need for our CI to free up more space on the hosted runner
        rm -rf /usr/share/dotnet
        df -h
        echo "::endgroup::"

    - shell: bash
      run: |
        echo "::group::Disable swap"
        sudo swapoff -a
        echo "::endgroup::"

    - shell: bash
      run: |
        echo "::group::Report available RAM"
        free -h
        echo "::endgroup::"

    - shell: bash
      run: |
        echo "::group::Increase inotify settings"
        sudo sysctl -w fs.inotify.max_user_watches=524288 fs.inotify.max_user_instances=512
        echo "::endgroup::"

    - name: Install WireGuard specific modules
      shell: bash
      run: |
        [[ "${{ inputs.using }}" =~ "wireguard" ]] || exit 0
        echo "::group::Installing WireGuard modules"
        sudo apt install -y linux-headers-$(uname -r) wireguard
        sudo modprobe wireguard
        echo "::endgroup::"

    - name: Restore images from the cache
      uses: submariner-io/shipyard/gh-actions/restore-images@release-0.15
      with:
        cache: ${{ inputs.cache }}
        working-directory: ${{ inputs.working-directory }}

    - name: Run E2E deployment and tests
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        k8s_version=${{ inputs.k8s_version }} &&
        make "${{ inputs.target }}" \
            using="${{ inputs.using }}" \
            ${k8s_version:+K8S_VERSION="$k8s_version"} \
            PLUGIN="${{ inputs.plugin }}" \
            TEST_ARGS="${{ inputs.test_args }}" \
            E2E_TESTDIR="${{ inputs.testdir }}"
