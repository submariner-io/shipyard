# Shared target to build images.
# To build an image, simply add a dependency on the target `package/.image.<abc>`
# where <abc> corresponds to an existing `package/Dockerfile.<abc>` file.
# The resulting image name will be `<abc>`.

SHELL := /bin/bash

# Force rebuild an image if it's not in docker
force_image_rebuild = $(if $(shell docker images | grep '\<$(1)\W*latest\>'),,FORCE_IMAGE)

# Force rebuild dynamically by calling this target
FORCE_IMAGE: ;

# Dockerfile dependencies are the file and any file copied into it
# We have to run it through a variable in order to expand any * that might be
# in the COPY command; find is used to handle directories as dependencies
# Files copied from another image are ignored
docker_deps = $(shell files=($(1) $$(awk '/COPY/ { if (substr($$2, 1, 7) != "--from=") { for (i = 2; i < NF; i++) { print $$i } } }' $(1))) && find $${files[*]} -type f)

# Patterned recipe to use to build any image from any Dockerfile
# An empty file is used for make to figure out if dependencies changed or not
.SECONDEXPANSION:
package/.image.%: $$(call docker_deps,package/Dockerfile.$$*) $$(call force_image_rebuild,$$*)
	$(SCRIPTS_DIR)/build_image.sh -i $(lastword $(subst ., ,$@)) -f $< $(IMAGES_ARGS)
	touch $@

# Default target to build images based on IMAGES variable
images: $(foreach image,$(IMAGES),package/.image.$(image))
