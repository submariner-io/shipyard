FROM fedora:39

# Unless specified otherwise, compress to a medium level which gives (from experemintation) a
# good balance between compression time and resulting image size.
ARG UPX_LEVEL=-5
ENV DAPPER_HOST_ARCH=amd64 SHIPYARD_DIR=/opt/shipyard SHELL=/bin/bash \
    DAPPER_RUN_ARGS="--net=kind"
ENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH} PATH=/go/bin:/root/.local/bin:/usr/local/go/bin:$PATH \
    GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm=armv6l GOLANG_ARCH=GOLANG_ARCH_${DAPPER_HOST_ARCH} \
    GOPATH=/go GO111MODULE=on GOPROXY=https://proxy.golang.org \
    SCRIPTS_DIR=${SHIPYARD_DIR}/scripts

# Requirements:
# Component          | Usage
# -------------------------------------------------------------
# curl               | download other tools
# file               | file identification (in compile/test.sh)
# findutils          | make unit (find unit test dirs)
# gcc                | needed by `go test -race` (https://github.com/golang/go/issues/27089)
# gh                 | backport, releases
# git                | find the workspace root
# golang             | build
# golangci-lint      | code linting
# helm               | e2e tests
# jq                 | JSON processing (GitHub API)
# kind               | e2e tests
# kube-ps1           | print out kube context in dapper shell
# kubectl            | e2e tests (in kubernetes-client)
# make               | OLM installation
# moby-engine        | Docker (for Dapper)
# moreutils          | sponge (for system tests)
# procps-ng          | watch (for installing ACM)
# python3-jinja2-cli | Jinja2 template engine (used by OVN's kind setup script)
# qemu-user-static   | Emulation (for multiarch builds)
# skopeo             | container image manipulation
# unzip              | ZIP extraction
# upx                | binary compression
# yq                 | YAML processing (OCM deploy tool)

# This layer's versioning is handled by dnf, and isn't expected to be rebuilt much except in CI
# Removals and UPX are done after all installations, since image layers are diffs.
# We remove:
# - DNF cache
# - Any unnecessary packages and executables
RUN dnf -y install --nodocs --setopt=install_weak_deps=False \
                   gcc git-core curl moby-engine make golang kubernetes-client \
                   findutils moreutils upx jq gitlint procps-ng \
                   qemu-user-static python3-jinja2-cli skopeo file unzip gh && \
    rpm -e --nodeps containerd && \
    rpm -qa "selinux*" | xargs -r rpm -e --nodeps && \
    dnf -y clean all && \
    rm -f /usr/bin/{dockerd,lto-dump} \
          /usr/libexec/gcc/x86_64-redhat-linux/10/lto1 && \
    find /usr/bin /usr/lib/golang /usr/libexec -type f -executable -newercc /proc -size +1M ! -name hyperkube \( -execdir upx ${UPX_LEVEL} {} \; -o -true \) && \
    ln -f /usr/bin/kubectl /usr/bin/hyperkube

COPY tools/go.mod /tools.mod

# This layer's versioning is determined by us, and thus could be rebuilt more frequently to test different versions
RUN LINT_VERSION=$(awk '/golangci-lint/ { print $2 }' /tools.mod) && \
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin -d ${LINT_VERSION} && \
    HELM_VERSION=$(awk '/helm.sh/ { print $2 }' /tools.mod) && \
    i=0; until curl "https://get.helm.sh/helm-${HELM_VERSION}-linux-${ARCH}.tar.gz" | tar -xzf -; do if ((++i > 5)); then break; fi; sleep 1; done && \
    mv linux-${ARCH}/helm /go/bin/ && chmod a+x /go/bin/helm && rm -rf linux-${ARCH} && \
    KIND_VERSION=$(awk '/sigs.k8s.io.kind/ { print $2 }' /tools.mod) && \
    curl -Lo /go/bin/kind "https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-${ARCH}" && chmod a+x /go/bin/kind && \
    YQ_VERSION=$(awk '/mikefarah.yq.v4/ { print $2 }' /tools.mod) && \
    GOFLAGS="" go install -v github.com/mikefarah/yq/v4@${YQ_VERSION} && \
    mkdir -p /usr/local/libexec/docker/cli-plugins && \
    BUILDX_VERSION=$(awk '/docker.buildx/ { print $2 }' /tools.mod) && \
    curl -L "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-${ARCH}" -o /usr/local/libexec/docker/cli-plugins/docker-buildx && \
    chmod 755 /usr/local/libexec/docker/cli-plugins/docker-buildx && \
    curl -L https://raw.githubusercontent.com/jonmosco/kube-ps1/1b8fe913b25ba857b84a94c3b1dbf7bb34f7caef/kube-ps1.sh -o /etc/profile.d/kube-ps1.sh && \
    find /go/bin /usr/local/libexec/docker/cli-plugins -type f -executable -newercc /proc -exec strip {} + && \
    find /go/bin /usr/local/libexec/docker/cli-plugins -type f -executable -newercc /proc \( -execdir upx ${UPX_LEVEL} {} \; -o -true \) && \
    go clean -cache -modcache && rm -f /tools.mod

# Link get-subctl script so it can be easily run inside a shell
RUN mkdir -p /root/.local/bin && ln -s $SCRIPTS_DIR/get-subctl.sh /root/.local/bin/subctl

# Copy kubecfg to always run on the shell
COPY scripts/shared/lib/kubecfg /etc/profile.d/kubecfg.sh

# Print kube context on interactive shell
COPY scripts/shared/kubeps1.sh /etc/profile.d/

# Copy shared files so that downstream projects can use them
COPY Makefile.* .gitlint ${SHIPYARD_DIR}/

# Copy the global dapper file so that we can make sure consuming projects are up to date
COPY Dockerfile.dapper ${SHIPYARD_DIR}/

# Copy CI deployment scripts into image to share with all submariner-io/* projects
WORKDIR $SCRIPTS_DIR
COPY scripts/shared/ .

# Copy our j2 wrapper for jinja2
COPY package/j2 /usr/local/bin/
