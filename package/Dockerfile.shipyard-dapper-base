FROM fedora:33

# Unless specified otherwise, compress to a medium level which gives (from experemintation) a
# good balance between compression time and resulting image size.
ARG UPX_LEVEL=-5
ENV DAPPER_HOST_ARCH=amd64 SHIPYARD_DIR=/opt/shipyard SHELL=/bin/bash
ENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH} PATH=/go/bin:/usr/local/go/bin:$PATH \
    GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm=armv6l GOLANG_ARCH=GOLANG_ARCH_${DAPPER_HOST_ARCH} \
    GOPATH=/go GO111MODULE=on GOFLAGS=-mod=vendor GOPROXY=https://proxy.golang.org \
    SCRIPTS_DIR=${SHIPYARD_DIR}/scripts OVN_DIR=${SHIPYARD_DIR}/ovn-kubernetes

# Requirements:
# Component        | Usage
# -------------------------------------------------------------
# clang            | needed by `go test -race` (https://github.com/golang/go/issues/27089)
# compiler-rt      | needed by `go test -msan`
# curl             | download other tools
# findutils        | make unit (find unit test dirs)
# gcc              | needed by `go test -race` (https://github.com/golang/go/issues/27089)
# ginkgo           | tests
# git              | find the workspace root
# gitlint          | Commit message linting
# golang           | build
# golangci-lint    | code linting
# helm             | e2e tests
# jq               | JSON processing (GitHub API)
# kind             | e2e tests
# kubectl          | e2e tests (in kubernetes-client)
# make             | OLM installation
# markdownlint     | Markdown linting
# moby-engine      | Dapper (Docker)
# npm              | Required for installing markdownlint
# qemu-user-static | Emulation (for multiarch builds)
# ShellCheck       | shell script linting
# subctl *         | Submariner's deploy tool (operator)
# upx              | binary compression
# yamllint         | YAML linting

# This layer's versioning is handled by dnf, and isn't expected to be rebuilt much except in CI
RUN dnf -y install --nodocs --setopt=install_weak_deps=False \
                   clang compiler-rt git-core curl moby-engine make golang kubernetes-client \
                   findutils upx jq ShellCheck npm gitlint yamllint \
                   qemu-user-static python3-pip && \
    npm install -g markdownlint-cli && \
    pip install j2cli[yaml] --user && \
    rpm -e --nodeps containerd npm python3-pip && \
    rpm -qa "selinux*" | xargs -r rpm -e --nodeps && \
    dnf -y clean all && \
    rm -f /usr/bin/{dockerd,lto-dump} \
          /usr/libexec/gcc/x86_64-redhat-linux/10/lto1 && \
    find /usr/bin /usr/lib/golang /usr/libexec -type f -executable -newercc /proc -size +1M ! -name hyperkube | xargs upx ${UPX_LEVEL} && \
    ln -f /usr/bin/kubectl /usr/bin/hyperkube

ENV LINT_VERSION=v1.36.0 \
    HELM_VERSION=v3.4.1 \
    KIND_VERSION=v0.7.0 \
    BUILDX_VERSION=v0.5.1

# This layer's versioning is determined by us, and thus could be rebuilt more frequently to test different versions
RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin -d ${LINT_VERSION} && \
    curl "https://get.helm.sh/helm-${HELM_VERSION}-linux-${ARCH}.tar.gz" | tar -xzf - && \
    mv linux-${ARCH}/helm /go/bin/ && chmod a+x /go/bin/helm && rm -rf linux-${ARCH} && \
    curl -Lo /go/bin/kind "https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-${ARCH}" && chmod a+x /go/bin/kind && \
    GOFLAGS="" go get -v github.com/onsi/ginkgo/ginkgo && \
    mkdir -p ~/.docker/cli-plugins && \
    curl -L "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-${ARCH}" -o ~/.docker/cli-plugins/docker-buildx && \
    chmod 755 ~/.docker/cli-plugins/docker-buildx && \
    find /go/bin ~/.docker/cli-plugins -type f -executable -newercc /proc | xargs -r strip && \
    find /go/bin ~/.docker/cli-plugins -type f -executable -newercc /proc | xargs -r upx ${UPX_LEVEL}

# Copy kubecfg to always run on the shell
COPY scripts/shared/lib/kubecfg /etc/profile.d/kubecfg.sh

# Copy shared makefile so that downstream projects can use it
COPY Makefile.* ${SHIPYARD_DIR}/

# Copy ovn-kubernetes to share with other projects
COPY submodules/ovn-kubernetes ${OVN_DIR}

# Copy CI deployment scripts into image to share with all submariner-io/* projects
WORKDIR $SCRIPTS_DIR
COPY scripts/shared/ .
